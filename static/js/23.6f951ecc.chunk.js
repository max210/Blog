(this.webpackJsonpblog=this.webpackJsonpblog||[]).push([[23],{184:function(n,e){n.exports="-  blob(\u4e8c\u8fdb\u5236\u7c7b\u578b\u7684\u5927\u5bf9\u8c61)\u6216\u6587\u4ef6File(\u7ee7\u627f\u81eaBlob) \u5bf9\u8c61\u8f6c\u4e3a base64\n\nreadFile  \u5bf9\u8c61\u7528\u4e8e\u8bfb\u53d6\u6587\u4ef6\uff08\u8bfb\u53d6\u5355\u4e2a\u5bf9\u8c61\u6587\u4ef6\uff0c\u6240\u4ee5\uff0c\u4e0d\u80fd\u76f4\u63a5\u8bfb\u53d6 Filelist \u5bf9\u8c61\u6587\u4ef6\u96c6\u5408\uff09\uff0c\u5373\u628a\u6587\u4ef6\u5185\u5bb9\u8bfb\u5165\u5185\u5b58\u3002\u5b83\u63a5\u6536 File \u5bf9\u8c61\u6216 Blob \u5bf9\u8c61\uff0c\u4f5c\u4e3a\u53c2\u6570\n\n  ```javascript\n  input.onchange = function(e) {\n    let file = e.target.files[0]\n    let reader = new FileReader()\n    reader.readAsDataURL(file)\n    reader.onload = function () {\n      console.log(reader.result)\n    }\n  }\n  ```\n\n  - readAsBinaryString(Blob|File)\uff1a\u8fd4\u56de\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u8be5\u5b57\u7b26\u4e32\u6bcf\u4e2a\u5b57\u8282\u5305\u542b\u4e00\u4e2a 0 \u5230 255 \u4e4b\u95f4\u7684\u6574\u6570\u3002\n  - readAsText(Blob|File, opt_encoding) \uff1a\u8fd4\u56de\u6587\u672c\u5b57\u7b26\u4e32\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6587\u672c\u7f16\u7801\u683c\u5f0f\u662f'UTF-8'\uff0c\u53ef\u4ee5\u901a\u8fc7\u53ef\u9009\u7684\u683c\u5f0f\u53c2\u6570\uff0c\u6307\u5b9a\u5176\u4ed6\u7f16\u7801\u683c\u5f0f\u7684\u6587\u672c\u3002\n  - readAsDataURL(Blob|File)\uff1a\u8fd4\u56de\u4e00\u4e2a\u57fa\u4e8e Base64 \u7f16\u7801\u7684 data-uri \u5bf9\u8c61\u3002\n  - readAsArrayBuffer(Blob|File) \uff1a\u8fd4\u56de\u4e00\u4e2a ArrayBuffer\uff08\u4e8c\u8fdb\u5236\u6570\u7ec4\uff09\u5bf9\u8c61\u3002\n  - abort()\uff1a\u8be5\u65b9\u6cd5\u7528\u4e8e\u4e2d\u6b62\u6587\u4ef6\u4e0a\u4f20\u3002\n\n- base64 \u8f6c blob\u5bf9\u8c61\n\n  ```javascript\n    // base64\u8f6c\u4e3ablob\n    let arr = base64.split(',')\n    let fileType = arr[0].match(/:(.*?);/)[1]\n    let binaryString = window.atob(arr[1])\n    let arrayBuffer = new ArrayBuffer(binaryString.length)\n    let intArray = new Uint8Array(arrayBuffer)\n\n    for (let i = 0; i < binaryString.length; i++) {\n      intArray[i] = binaryString.charCodeAt(i)\n    }\n\n    let blob\n\n    try {\n      blob = new Blob([intArray], { type: fileType })\n    } catch (error) {\n      let BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder\n      if (error.name === 'TypeError' && window.BlobBuilder) {\n        let builder = new BlobBuilder()\n        builder.append(arrayBuffer)\n        blob = builder.getBlob()\n      } else {\n        console.log('\u7248\u672c\u8fc7\u4f4e\uff0c\u4e0d\u652f\u6301\u4e0a\u4f20\u56fe\u7247')\n        return\n      }\n    }\n  ```\n\n-  blob \u5bf9\u8c61\u8f6c file\n\n  ```javascript\n  let files = new window.File([blob], file.name, {type: fileType})\n  ```\n\n- \u4e8c\u8fdb\u5236\u8f6c\u6d4f\u89c8\u5668\u8bc6\u522b\u5c5e\u6027\n\n  ```javascript\n  // 1\n  const blob = new Blob([buffer], {'type': 'image\\/jpeg'})\n  const imgUrl = window.URL.createObjectURL(blob)\n  // 2\n  let imgUrl = 'data:image/jpeg;base64,' + btoa(String.fromCharCode(...new Uint8Array(buffer)))\n  ```\n\n- \u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u4e0earraybuffer\u4e92\u8f6c\n\n  ```javascript\n  function arrayBufferToStr(buf) {\n    return String.fromCharCode(...new Uint8Array(buf))\n  }\n  function strToArrayBuffer(str) {\n    return new Uint8Array([...str].map(v => v.codePointAt(0)))\n  }\n  ```\n\n- formdata \u5f62\u5f0f\u4e0a\u4f20\u6587\u4ef6\n\n  ```javascript\n  // html\n  <input id=\"myFile\" type=\"file\" multiple>\n\n  // js\n  let fileInput = document.getElementById(\"myFile\");\n  let files = fileInput.files;\n  let formData = new FormData();\n\n  for(var i = 0; i < files.length; i++) {\n      var file = files[i];\n      formData.append('files[]', file, file.name);\n  }\n  ```\n\n- \u538b\u7f29\u56fe\u7247\n\n  ```javascript\n  // vue\n  inputChange (e) {\n    if (typeof FileReader === 'undefined') {\n      toast.error('\u60a8\u7684\u6d4f\u89c8\u5668\u4e0d\u652f\u6301\u4e0a\u4f20\u56fe\u7247')\n      return\n    }\n    toast.loading.show()\n    this.file = e.target.files[0]\n    this.$refs.cameraInput.value = '' // \u517c\u5bb9\u4e2a\u522b\u6d4f\u89c8\u5668\u4e0d\u4f1a\u91cd\u590d\u89e6\u53d1input\u7684change\u4e8b\u4ef6\n    console.log('this.file', this.file)\n\n    let reader = new FileReader()\n    reader.readAsDataURL(this.file)\n    reader.onload = e => {\n      this.imgUnloadSrc = e.target.result\n      let image = new Image()\n      image.src = e.target.result\n      image.onload = () => {\n        const maxSize = 500 * 1024 // 500KB\n        if (this.file.size > maxSize) {\n          this.compressImg(image)\n        } else {\n          this.uploadImg(this.file)\n        }\n      }\n    }\n  },\n  // \u538b\u7f29\u56fe\u7247\u5e76\u8fd4\u56de\u6587\u4ef6\u5bf9\u8c61\n  compressImg (image) {\n    let canvas = document.createElement('canvas')\n    let ctx = canvas.getContext('2d')\n    canvas.width = image.width\n    canvas.height = image.height\n    ctx.drawImage(image, 0, 0, canvas.width, canvas.height)\n\n    let base64 = canvas.toDataURL(this.file.type || 'image/jpeg', 0.1) // image/jpeg \u517c\u5bb9\u90e8\u5206\u5b89\u5353\u51fa\u73b0\u83b7\u53d6\u4e0d\u5230type\u7684\u60c5\u51b5\n\n    // base64\u8f6c\u4e3ablob\n    let binaryString = window.atob(base64.split(',')[1])\n    let arrayBuffer = new ArrayBuffer(binaryString.length)\n    let intArray = new Uint8Array(arrayBuffer)\n\n    for (let i = 0, j = binaryString.length; i < j; i++) {\n      intArray[i] = binaryString.charCodeAt(i)\n    }\n\n    let blob\n\n    try {\n      blob = new Blob([intArray], { type: this.file.type })\n    } catch (error) {\n      let BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder\n      if (error.name === 'TypeError' && window.BlobBuilder) {\n        let builder = new BlobBuilder()\n        builder.append(arrayBuffer)\n        blob = builder.getBlob()\n      } else {\n        toast.error('\u7248\u672c\u8fc7\u4f4e\uff0c\u4e0d\u652f\u6301\u4e0a\u4f20\u56fe\u7247')\n        return\n      }\n    }\n    const fileOfBlob = new File([blob], this.file.name)\n    console.log('fileOfBlob', fileOfBlob)\n    this.uploadImg(fileOfBlob)\n  }\n  ```\n"}}]);